var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var Web3 = require("web3");
var abi = require('./public/json/abi.json');
var ADDR = abi.addr;
var ABI = abi.abi;

app.use(express.static('public'));
app.use(express.static('public/views'));

app.get('/index.html', function (req, res) {
   res.sendFile( __dirname + "/" + "index.html" );
})

app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());

var server = app.listen(3080, function () {

  var host = server.address().address
  var port = server.address().port

  // console.log("http://%s:%s", host, port);
})
/*web3起链子 start*/
/*连党海洋的主链*/
if (typeof web3 !== 'undefined') {
  web3 = new Web3(web3.currentProvider);
} else {
  // set the provider you want from Web3.providers
  web3 = new Web3(new Web3.providers.HttpProvider("http://10.168.120.121:8545"));
}


app.post('/songsList',function(req,res){
	/*部署合约，创建合约*/
	var ClientReceipt = web3.eth.contract(ABI).at(ADDR /* address */);
	// console.log(ClientReceipt.workReleased()); 
	var event = ClientReceipt.workReleased({
		sender:"0xa3a4f9d804f15495a583f2847526645d3bfee16d"
	},
	{
		fromBlock:0,
		toBlock:'latest'
	});
	event.get(function(error,result){//用.get而不是用.watch方法是因为.watch方法是实时变化的，会只显示最后也是最新的一条，而.get方法是显示全部的。
		// console.log('11111111111111111111111111');
		// console.log(result);
		var _arr = [ ];
		for(var i=0,len=result.length;i<len;i++){
			_arr.push(result[i].args);
		}
		res.send({success:1,data:_arr})
	})
})



/*认证歌曲，先认证*/
app.post('/web3',function(req,res){
	// console.log(req.body);
	// res.send({success : 1});
	var logAddress = ADDR,
	      musicName = req.body.musicName,
	      musicAuthor = req.body.musicAuthor,
	      musicFile = req.body.musicFile,
	      musicAddress = req.body.musicAddress;
	web3.personal.unlockAccount(web3.eth.coinbase,'12345')
  	var untitled_workContract = web3.eth.contract([{'constant': true, 'inputs': [], 'name': 'artist', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'title', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'log', 'outputs': [{'name': '', 'type': 'address'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'contractVersion', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'imageUrl', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'type': 'function'}, {'constant': true, 'inputs': [], 'name': 'metadataUrl', 'outputs': [{'name': '', 'type': 'string'}], 'payable': false, 'type': 'function'}, {'inputs': [{'name': '_logAddress', 'type': 'address'}, {'name': '_title', 'type': 'string'}, {'name': '_artist', 'type': 'string'}, {'name': '_imageUrl', 'type': 'string'}, {'name': '_metadataUrl', 'type': 'string'}], 'payable': false, 'type': 'constructor'}]);
  	var untitled_work = untitled_workContract.new(
  		logAddress,
  		musicName,
  		musicAuthor,
  		musicFile,
  		musicAddress,
  		{
		       from: web3.eth.coinbase,
		       data: '0x606060405234620000005760405162000bc838038062000bc8833981016040528080519060200190919080518201919060200180518201919060200180518201919060200180518201919050505b84600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360019080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000dc57805160ff19168380011785556200010d565b828001600101855582156200010d579182015b828111156200010c578251825591602001919060010190620000ef565b5b5090506200013591905b808211156200013157600081600090555060010162000117565b5090565b50508260029080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200018557805160ff1916838001178555620001b6565b82800160010185558215620001b6579182015b82811115620001b557825182559160200191906001019062000198565b5b509050620001de91905b80821115620001da576000816000905550600101620001c0565b5090565b50508060039080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022e57805160ff19168380011785556200025f565b828001600101855582156200025f579182015b828111156200025e57825182559160200191906001019062000241565b5b5090506200028791905b808211156200028357600081600090555060010162000269565b5090565b50508160049080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d757805160ff191683800117855562000308565b8280016001018555821562000308579182015b8281111562000307578251825591602001919060010190620002ea565b5b5090506200033091905b808211156200032c57600081600090555060010162000312565b5090565b5050600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663841cf3cd3386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200183810383528581815181526020019150805190602001908083836000831462000426575b805182526020831115620004265760208201915060208101905060208303925062000400565b505050905090810190601f168015620004535780820380516001836020036101000a031916815260200191505b508381038252848181518152602001915080519060200190808383600083146200049e575b8051825260208311156200049e5760208201915060208101905060208303925062000478565b505050905090810190601f168015620004cb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15620000005760325a03f11562000000575050505b50505050505b6106bc806200050c6000396000f30060606040523615610076576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806343bc16121461007b5780634a79d50c1461011157806351973ec9146101a7578063a0a8e460146101f6578063aba831501461028c578063cd29c71a14610322575b610000565b34610000576100886103b8565b60405180806020018281038252838181518152602001915080519060200190808383600083146100d7575b8051825260208311156100d7576020820191506020810190506020830392506100b3565b505050905090810190601f1680156101035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761011e610456565b604051808060200182810382528381815181526020019150805190602001908083836000831461016d575b80518252602083111561016d57602082019150602081019050602083039250610149565b505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576101b46104f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b346100005761020361051a565b6040518080602001828103825283818151815260200191508051906020019080838360008314610252575b8051825260208311156102525760208201915060208101905060208303925061022e565b505050905090810190601f16801561027e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610299610554565b60405180806020018281038252838181518152602001915080519060200190808383600083146102e8575b8051825260208311156102e8576020820191506020810190506020830392506102c4565b505050905090810190601f1680156103145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761032f6105f2565b604051808060200182810382528381815181526020019150805190602001908083836000831461037e575b80518252602083111561037e5760208201915060208101905060208303925061035a565b505050905090810190601f1680156103aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561044e5780601f106104235761010080835404028352916020019161044e565b820191906000526020600020905b81548152906001019060200180831161043157829003601f168201915b505050505081565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ec5780601f106104c1576101008083540402835291602001916104ec565b820191906000526020600020905b8154815290600101906020018083116104cf57829003601f168201915b505050505081565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b604060405190810160405280600481526020017f76312e300000000000000000000000000000000000000000000000000000000081525081565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106885780601f1061065d57610100808354040283529160200191610688565b820191906000526020600020905b81548152906001019060200180831161066b57829003601f168201915b5050505050815600a165627a7a72305820110643ca84d4737bcff3ab689164048439b88723181efd665bbb2c26aa5150930029',
		       gas: '4700000'
		}, function(e,contract){
		     // res.send({success : 1});
		      if(contract.address){
		      	console.log(contract.address);
		      	res.send({success : 1});
		      }
		}
  	)
})
/*web3起链子 end*/